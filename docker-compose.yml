services:
  postgres:
    image: postgres:17-alpine
    container_name: load-balancer-db
    environment:
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - POSTGRES_DB=${DB_NAME}
    ports:
      - "${DB_PORT}:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER} -d ${DB_NAME}"]
      interval: 5s
      timeout: 5s
      retries: 5

  migrations:
    image: migrate/migrate:v4.15.2
    environment:
      - DB_URL=postgresql://${DB_USER}:${DB_PASSWORD}@postgres:5432/${DB_NAME}?sslmode=disable
    volumes:
      - ./internal/storage/migrations:/migrations
    command: ["-path", "/migrations", "-database", "postgresql://${DB_USER}:${DB_PASSWORD}@postgres:5432/${DB_NAME}?sslmode=disable", "up"]
    depends_on:
      postgres:
        condition: service_healthy
    restart: on-failure

  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: load-balancer
    environment:
      - DB_URL=${DB_URL}
      - DB_USER=${DB_USER}
      - DB_PASSWORD=${DB_PASSWORD}
      - DB_HOST=${DB_HOST}
      - DB_PORT=${DB_PORT}
      - DB_NAME=${DB_NAME}
      - PORT=${APP_PORT}
    ports:
      - "${APP_PORT}:8080"
    depends_on:
      migrations:
        condition: service_completed_successfully

volumes:
  postgres-data: